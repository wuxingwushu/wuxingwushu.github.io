<导航>翻译姬介绍
p	我个人英语特别差几乎不会，但是别人代码和一些开源的引擎里注释都是英文，我想要翻译，但是我只是偶尔需要小范围翻译，打开网页或翻译软件我个人感觉不方便，而且功能东一个西一个用起来不方便，所以就想着自己写一个翻译软件，虽然没有比别人专业，效果不一定有人家好，但是自己写的软件可以随时改成自己想要的样式很方便的也很有成就感，刚刚好也想到一些实现翻译代码逻辑
p	主要两点
p	1 爬虫，把要翻译的内容用百度和有道翻译在用爬虫，在把翻译结果取出来
p	2 <a target='view_window' style='color:#00c6ff' href="https://tesseract-ocr.github.io/tessdoc/Home.html#binaries">Tesseract-OCR</a>，可以实现识别图片文字
<导航>环境配置
<代码>
py
Python==3.7.13
pip install pyinstaller==4.5.1
pip install virtualenv==20.16.5
pip install urllib3==1.26.12
pip install requests==2.28.1
pip install pywin32==302
pip install wheel==0.35.1
pip install setuptools==61.2.0
pip install PyQt5==5.15.7
pip install pytesseract==0.3.10
pip install keyboard==0.13.5
pip install pyautogui==0.9.53
pip install pynput==1.7.6
</代码>
<导航>源码
p	源码当中有注释自行理解
<代码>
py
# 正则表达式 处理字符串
import re
# 获取键盘信息
import keyboard
# 截取电脑当前画面用于OCR文字识别
import pyautogui as p
# 监听鼠标事件
from pynput.mouse import Controller as mouseControl
# OCR的python调用库
import pytesseract
# 爬虫，爬取翻译结果
import requests,time,random,hashlib
import queue
import json
import sys
# 创建窗口显示翻译结果，系统托盘，和截图画框
from PyQt5.QtWidgets import QApplication, QWidget, QLineEdit, QMainWindow, \
    QVBoxLayout, QAction, QSystemTrayIcon, QMenu, QPushButton, QDialog
from PyQt5.QtGui import QIcon, QPainter, QPalette
from PyQt5.QtCore import Qt, QCoreApplication, QTimer, pyqtSignal
# 获取剪切板内容等等
import win32clipboard as cw
import win32con
# WIN的按键控制
import win32api



# 储存 配置.txt 用户的配置信息
Data = {"OCR":0,"翻译API":0,"百度API_ID":0,"百度API_密钥":0,"检查频率":0,"显示时间":0,"翻译快捷键":0,"截图快捷键":0}
# 用于读取  配置.txt  数据
def init():
    pz_data = [0, 0, 0, 0, 0, 0, 0, 0]
    f = open('配置.txt', encoding="utf-8")# 打开 配置.txt
    for i in range(8): # 读取前8行的配置数据内容
        f_nr = str(f.readline()[:-1]) # 读取下一行并且去掉换行符
        f_nr = f_nr[f_nr.find(':') + 1:] # 截取：后面内容
        pz_data[i] = re.sub(' ', '', f_nr)# 删除全部空格
    f.close()# 关闭 配置.txt
    # 把每一个数据传给Data储存起来
    Data["OCR"] = pz_data[0]
    Data["翻译API"] = int(pz_data[1])
    Data["百度API_ID"] = pz_data[2]
    Data["百度API_密钥"] = pz_data[3]
    Data["检查频率"] = int(pz_data[4])
    Data["显示时间"] = int(pz_data[5])
    Data["翻译快捷键"] = pz_data[6]
    Data["截图快捷键"] = pz_data[7]

# 配置初始化
init()
# 用于储存工作状态
key_switch = {"软件总开关":1,"是否翻译中":1,"图片":0,"以显示时间":0}
# 初始化窗口
app = QApplication(sys.argv)
# 获取鼠标
mouse = mouseControl()
# 初始化OCR的接口调用
pytesseract.pytesseract.tesseract_cmd = Data["OCR"]
# 用于保存截图的两个坐标用于截取矩形画面
pos = [0,0,0,0]




class ScreenShotsWin(QDialog):
    # 定义一个信号
    oksignal = pyqtSignal()
    def __init__(self):
        super(ScreenShotsWin, self).__init__()
        self.showFullScreen()
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.Tool)
        self.setObjectName("MainWindow")
        self.setWindowOpacity(0.2)
        self.start = (0, 0)  # 开始坐标点
        self.end = (0, 0)  # 结束坐标点
        self.palette = QPalette()


    def paintEvent(self, event):
        x = self.start[0]
        y = self.start[1]
        w = self.end[0] - x
        h = self.end[1] - y
        pp = QPainter(self)
        pp.drawRect(x, y, w, h)


    def mousePressEvent(self, event):
        # 点击左键开始选取截图区域
        if event.button() == Qt.LeftButton:
            self.start = (event.pos().x(), event.pos().y())
            pos[0] = event.pos().x()
            pos[1] = event.pos().y()

    def mouseReleaseEvent(self, event):
        # 鼠标左键释放开始截图操作
        if event.button() == Qt.LeftButton:
            self.end = (event.pos().x(), event.pos().y())
            pos[2] = event.pos().x()
            pos[3] = event.pos().y()
            self.close()
            self.start = (0, 0)
            self.end = (0, 0)
            # 对截图框的坐标进行处理
            if pos[0] > pos[2]:
                pos_x = pos[0]
                pos[0] = pos[2]
                pos[2] = pos_x
            if pos[1] > pos[3]:
                pos_y = pos[1]
                pos[1] = pos[3]
                pos[3] = pos_y

            # 如果框的大小过小就不进行识别翻译
            if (pos[2] - pos[0]) < 10:
                key_switch["是否翻译中"] = 1 # 开启快捷键检查
                return
            if (pos[3] - pos[1]) < 10:
                key_switch["是否翻译中"] = 1 # 开启快捷键检查
                return

            # 对画面进行截取
            jt = key_switch["图片"].crop((pos[0], pos[1], pos[2], pos[3]))
            # 对截取的画面进行文字识别，并且返回识别的文字
            fanyizhi = pytesseract.image_to_string(jt)
            # 对文字进行翻译
            fan_yi(fanyizhi)

    def mouseMoveEvent(self, event):
        # 鼠标左键按下的同时移动鼠标绘制截图辅助线
        if event.buttons() and Qt.LeftButton:
            self.end = (event.pos().x(), event.pos().y())
            self.update()

    def jietukais(self):
        # 获取当前屏幕画面
        key_switch["图片"] = p.screenshot()
        # img[0].save("kao.png")
        # self.setStyleSheet("#MainWindow{border-image:url(./kao.png);}")
        # 显示截图画框界面
        self.show()





class Monitor(QWidget):
    def fan_yi_nr(self,content, shuchu):
        self.x = mouse.position[0] # 获取鼠标位置
        self.y = mouse.position[1]
        self.setGeometry(self.x, self.y, self.changdu, self.gaodu) # 设置窗口位置和大小
        self.label.setText(content) # 设置文本框显示内容
        self.label_.setText(shuchu)
        key_switch["以显示时间"] = 0 # 初始化以显示时长
        self.show() # 显示翻译结果
        key_switch["是否翻译中"] = 1 # 开启快捷键检查


    def button_fany(self):
        xz_x = self.x # 获取当前窗口X的位置
        xz_y = self.y # 获取当前窗口Y的位置
        fan_yi(self.label.text()) # 重新翻译文本中的内容
        stats.move(xz_x,xz_y) # 移动到上一次窗口的位置
        self.x = xz_x # 把当前窗口的位置设置为上一次窗口的位置，以防判断鼠标是否在窗口上出问题
        self.y = xz_y




    def __init__(self):
        super().__init__()
        # 设置窗口无边框； 设置窗口置顶；
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.Tool)
        # 设置窗口背景透明
        #self.setAttribute(Qt.WA_TranslucentBackground)
        # 设置透明度(0~1)
        self.setWindowOpacity(0.9)
        # 设置鼠标为手状
        self.setCursor(Qt.PointingHandCursor)

        # 创建两个文本框
        self.label = QLineEdit(self)
        self.label_ = QLineEdit(self)
        # 实例化垂直布局
        layout = QVBoxLayout()
        # 相关控件添加到垂直布局中
        layout.addWidget(self.label)
        layout.addWidget(self.label_)

        # 设置布局
        self.setLayout(layout)
        self.changdu = 200 # 窗口的宽
        self.gaodu = 100 # 窗口的高
        self.x = mouse.position[0] # 获取鼠标X当前位置
        self.y = mouse.position[1] # 获取鼠标Y当前位置

        # 创建翻译按键
        self.quit = QPushButton('翻译', self)  # button 对象
        self.quit.setGeometry(self.changdu - 40, 0, 40, 20) # 设置按键位置
        self.quit.clicked.connect(self.button_fany) # 设置按键绑定的事件


class System_Tray(QWidget):
    # 按键检查
    def showtimer(self):
        # 判断是否要进行按键检查
        if key_switch["是否翻译中"]:
            xunhuan_shijian()

    # 当系统托盘被点击事件
    def act(self,reason):
        if reason == 3:
            self.tpMenux.close() # 关闭右键菜单
            stats.fan_yi_nr("打我头干什么！！！", "不理你了") # 显示点击弹窗
            key_switch["以显示时间"] = Data["显示时间"] - 10 # 设置显示时间
            stats.move(mouse.position[0],mouse.position[1]-stats.gaodu) # 设置显示位置

    # 右键退出按键事件
    def quitApp(self):
        key_switch["软件总开关"] = 0 # 关闭循环
        QCoreApplication.instance().quit() # 结束所有窗口

    # 更换菜单内容，和更换翻译选项
    def qiehuan(self):
        if Data["翻译API"]:
            Data["翻译API"] = 0
            self.a1 = QAction('&更换百度', triggered=self.qiehuan)
            self.tpMenux = QMenu()
            self.tpMenux.addAction(self.a1)
            self.tpMenux.addAction(self.a2)
            self.tp.setContextMenu(self.tpMenux)
        else:
            Data["翻译API"] = 1
            self.a1 = QAction('&更换有道', triggered=self.qiehuan)
            self.tpMenux = QMenu()
            self.tpMenux.addAction(self.a1)
            self.tpMenux.addAction(self.a2)
            self.tp.setContextMenu(self.tpMenux)


    # 初始化系统托盘
    def __init__(self):
        super(System_Tray, self).__init__()
        self.tp = QSystemTrayIcon() # 创建系统托盘
        self.tp.setIcon(QIcon('./favicon.ico')) # 设置系统托盘图标
        self.tp.activated.connect(self.act)
        # 创建右键菜单
        if Data["翻译API"]:
            self.a1 = QAction('&更换有道', triggered=self.qiehuan) # 设置选线文字和绑定事件
        else:
            self.a1 = QAction('&更换百度', triggered=self.qiehuan) # 设置选线文字和绑定事件
        self.a2 = QAction('&退出', triggered=self.quitApp)  # 直接退出可以用qApp.quit
        self.tpMenux = QMenu() # 创建一个垂直盒子
        # 把刚刚那两个放进盒子形成右键菜单内容
        self.tpMenux.addAction(self.a1)
        self.tpMenux.addAction(self.a2)
        # 把刚刚的右键菜单绑架在系统托盘上
        self.tp.setContextMenu(self.tpMenux)
        self.tp.show() # 显示系统托盘

        self.timer = QTimer() # 设置一个计时器
        self.timer.timeout.connect(self.showtimer) # 给计时器绑定事件
        self.timer.start(Data["检查频率"])  # 设置检查时间间隔


# 初始化刚刚窗口
The_canvas = ScreenShotsWin()
stats = Monitor()
SystemTray = System_Tray()

# 获取剪切板内容
def get_text():
    cw.OpenClipboard()# 打开剪切板
    d = cw.GetClipboardData(win32con.CF_TEXT)# 读取剪切板
    cw.CloseClipboard()# 关闭剪切板
    return d.decode('GBK')# 用 GBK 格式读取 内容

# 百度翻译
def baidu_fan_yi(content):
    # 生成访问DATA用于伪装正常的访问
    header = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36',
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    salt = "666"
    sign = Data["百度API_ID"] + content + salt + Data["百度API_密钥"]
    md5 = hashlib.md5()
    md5.update(sign.encode('utf-8'))  # 生成签名计算MD5码
    data = {
        "q": content,
        "from": "auto",
        "to": "zh",
        "appid": Data["百度API_ID"],
        "salt": salt,
        "sign": md5.hexdigest()
    }
    # 开始访问
    response = requests.post('https://fanyi-api.baidu.com/api/trans/vip/translate', headers=header,
                             data=data,timeout=(3, 1))  # 发送post请求
    text = response.json()  # 返回的为json格式用json接收数据
    shuchu = text['trans_result'][0]['dst'] # 从json数据截取翻译结果
    stats.fan_yi_nr(content,shuchu) # 把翻译内容和结果显示出来

# 有道翻译
def youdao_fan_yi(content):
    # 生成访问DATA用于伪装正常的访问
    lts = str(int(time.time() * 1000))
    salt = lts + str(random.randint(0, 9))
    sign_str = 'fanyideskweb' + content + salt + 'Ygy_4c=r#e#4EX^NUGUc5'
    m = hashlib.md5()
    m.update(sign_str.encode())
    sign = m.hexdigest()
    url = 'https://fanyi.youdao.com/translate_o?smartresult=dict&smartresult=rule'
    headers = {
        "Referer": "https://fanyi.youdao.com/",
        "Cookie": 'OUTFOX_SEARCH_USER_ID=-1124603977@10.108.162.139; JSESSIONID=aaamH0NjhkDAeAV9d28-x; OUTFOX_SEARCH_USER_ID_NCOO=1827884489.6445506; fanyi-ad-id=305426; fanyi-ad-closed=1; ___rl__test__cookies=1649216072438',
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36"
    }
    data = {
        "i": content,
        "from": "AUTO",
        "to": "AUTO",
        "smartresult": "dict",
        "client": "fanyideskweb",
        "salt": salt,
        "sign": sign,
        "lts": lts,
        "bv": "a0d7903aeead729d96af5ac89c04d48e",
        "doctype": "json",
        "version": "2.1",
        "keyfrom": "fanyi.web",
        "action": "FY_BY_REALTlME",
    }
    # 开始访问
    res = requests.post(url, headers=headers, data=data)
    response = json.loads(res.text) # 返回的为json格式用json接收数据
    value = response['translateResult'][0][0]['tgt'] # 从json数据截取翻译结果
    stats.fan_yi_nr(content, value) # 把翻译内容和结果显示出来


def fan_yi(content):
    duoyu = ["[.]", "[_]", "[-]", "[+]"]
    daxie = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U",
             "V", "W", "X", "Y", "Z"]
    daxie_san = [" A ", " B ", " C ", " D ", " E ", " F ", " G ", " H ", " I ", " J ", " K ", " L ", " M ",
                 " N ", " O ", " P ", " Q ", " R ", " S ", " T ", " U ", " V ", " W ", " X ", " Y ", " Z ",
                 " a ", " b ", " c ", " d ", " e ", " f ", " g ", " h ", " i ", " j ", " k ", " l ", " m ",
                 " n ", " o ", " p ", " q ", " r ", " s ", " t ", " u ", " v ", " w ", " x ", " y ", " z "
                 ]
    for zhi_ in range(len(duoyu)): # 把对应符号用空格替换
        content = re.sub(duoyu[zhi_], ' ', content)
    for zhi_1 in range(len(daxie)): # 在大写字符前面加一个空格
        content = re.sub(daxie[zhi_1], (' ' + daxie[zhi_1]), content)
    #for zhi_ in range(len(daxie_san)):
    #    content = re.sub(daxie_san[zhi_], '', content)

    if not len(re.sub(' ', '', content)): # 如果去除所以空格发现没有内容就不进行翻译
        key_switch["是否翻译中"] = 1  # 开启快捷键检查
        stats.fan_yi_nr("翻译内容：空", "空等于：寂寞") # 提示没有获取翻译内容
        return

    # 判断是百度翻译还是有道翻译
    if int(Data["翻译API"]):
        baidu_fan_yi(content) # 百度
    else:
        youdao_fan_yi(content) # 有道



def xunhuan_shijian():
    try:
        # 判断是否结束显示翻译的结果
        if key_switch["以显示时间"] >= Data["显示时间"]:
            stats.close()# 关闭显示翻译结果
        else:
            key_switch["以显示时间"] += 1 # 翻译以显示时间加一
            # 判断鼠标是否在翻译窗口上
            if (((mouse.position[0]>stats.x) & (mouse.position[0]<(stats.x + stats.changdu))) & ((mouse.position[1]>stats.y) & (mouse.position[1]<(stats.y + stats.gaodu)))):
                key_switch["以显示时间"] = 0 # 是的话翻译时间初始化

        # 获取选择翻译的快捷键，被触发事件
        if keyboard.is_pressed(Data["翻译快捷键"]):
            key_switch["是否翻译中"] = 0 # 关闭快捷键检查防止多次触发
            stats.close() # 关闭已打开结果翻译
            while (keyboard.is_pressed(Data["翻译快捷键"])): # 让快捷键再次停顿松开继续工作
                time.sleep(0.1)
            time.sleep(0.3)# 等待0.3S
            #  注意！！！这0.3 是想让用户把所以按键都松开要不然没法复制现在内容进行翻译
            win32api.keybd_event(17, 0, 0, 0)  # ctrl键位码是17
            win32api.keybd_event(67, 0, 0, 0)  # c键位码是67
            time.sleep(0.01) # 等待0.01让内容被复制到
            win32api.keybd_event(67, 0, win32con.KEYEVENTF_KEYUP, 0)  # 释放按键
            win32api.keybd_event(17, 0, win32con.KEYEVENTF_KEYUP, 0)
            # 获取复制内容进行翻译
            fan_yi(get_text())


        if keyboard.is_pressed(Data["截图快捷键"]):
            key_switch["是否翻译中"] = 0 # 关闭快捷键检查防止多次触发
            stats.close() # 关闭已打开结果翻译
            The_canvas.jietukais() # 显示截图画框窗口进行截图
    except:
        pass

while key_switch["软件总开关"]:
    try:
        sys.exit(app.exec_())# 开始工作
    except:
        pass
</代码>
<导航>打包EXE
p	自己百度：<a target='view_window' style='color:#00c6ff' href="https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&tn=68018901_39_oem_dg&wd=python%20%E6%89%93%E5%8C%85%20exe&oq=python%2520%25E6%2589%2593%25E5%258C%2585&rsv_pq=bbf492580000cd40&rsv_t=6fb7RfSv61IMeAwoAE0C6ijQb3DRD8%2Fd%2BEUs%2Fq69Y6Z7d5Vcx3SU61ViwC6snjGHs9zmuUi83%2FTF&rqlang=cn&rsv_enter=0&rsv_dl=tb&rsv_btype=t&inputT=119255&rsv_sug3=23&rsv_sug1=31&rsv_sug7=100&rsv_sug4=121099">Python 打包 exe</a>
P	这是我打包好的翻译姬：
P	链接：https://pan.baidu.com/s/1x4QDlbN3tgnUuuEQJQ8Yig?pwd=vh1n 
P	提取码：vh1n
P        (っ °Д °;)っ
P        
P        
P        
